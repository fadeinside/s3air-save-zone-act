//@ Function taken from sonic3air_dev/scripts/level/level_display.lemon
//# address-hook(0x04e408) end(0x04e456)
function void UpdateLevelDisplay()
{
	// Check if this is not a bonus stage, if it is a bonus stage, then do not take any action
	bool isNotBonusStages = !(global.zone == 0x0e || global.zone == 0x0f || global.zone == 0x10 || global.zone == 0x11 || global.zone == 0x12 || global.zone == 0x13 || global.zone == 0x14 || global.zone == 0x15)
	if (isNotBonusStages)
	{
		// Slot address load
		u32 slotAddress = 0xffffb128 + (0x4a * (dataselect.slot_selected - 0x01))
		
		// Slot data address load
		u32 slotDataAddress = 0xffffe6ac + (0x0a * (dataselect.slot_selected - 0x01))
		
		// Load saved act
		u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
		
		// Save current act
		// - If it is not a "No Save" slot, if this slot is non-completed, and the current zone act is greater than the saved one
		if (dataselect.slot_selected > 0x00 && (u8[slotDataAddress + 0x00] == 0x00) && (global.zone_act > loadSavedAct))
		{
			SaveZoneAct.Data.saveCurrentZoneAct(slotAddress)
			//System.writeDisplayLine(stringformat("Saved 0x%04x to 0x%06x", global.zone_act, A0))
		}
	}
	
	// Call the base function
	base.UpdateLevelDisplay()
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d8c4) end(0x00d90c)
function void fn00d8c4()
{
	if ((control.pad1.pressed & CONTROL_RIGHT) == 0x00)
	{
		if ((control.pad1.pressed & CONTROL_LEFT) == 0x00)
		{
			DrawObject()
			return
		}
		
		// Slot address load
		u32 slotAddress = 0xffffb128 + (0x4a * (dataselect.slot_selected - 0x01))
		
		// Get saved data from PersistentData
		u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
		
		// Check if you have saved data
		if (loadSavedAct > 0x0000)
		{
			SaveZoneAct.Data.resetSavedZoneAct(slotAddress)
			//System.writeDisplayLine("Saved zone act deleted")
		}
		
		// Here we are set a temporary value to the addresses when slot was been deleted
		u8[slotAddress + 0x08] = 0x01
	}
	
	// Call the base function
	base.fn00d8c4()
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d790) end(0x00d790)
function void fn00d790()
{
	// Call base function
	base.fn00d790()
	
	// Loop simulates slots
	for (u8 slot = 0x00; slot < 0x08; ++slot)
	{
		// Slot address load
		u32 slotAddress = 0xffffb128 + (0x4a * slot)
		
		// Slot data address load
		u32 slotDataAddress = 0xffffe6ac + (0x0a * slot)
		
		// Get saved data from PersistentData
		u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
		
		// Check if this slot is non-completed
		if (u8[slotDataAddress + 0x00] == 0x00)
		{
			u8 getActID = getchar(stringformat("%04x", loadSavedAct), 0x03) - 47
			u8[slotAddress + 0x70] = getActID
		}
		
		//debugLog(stringformat("Save slot : Act %d", u8[slotAddress + 0x70]))
	}
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
function bool fn00d458()
{
	// Result values:
	// - 0 = Abort outer function
	// - 1 = Allow character selection (up/down)
	// - 2 = Continue normally outside

	if (u8[A1] & 0x80)
	{
		// Empty save slot
		u8[A0 + 0x1d] = 0x0f
		objA0.animation.frame = 0x00
		
		if (u16[0xffffb078] != 0x00 || u16[0xffffeee4] != 0x00)
			return 0x02
		else
			return 0x01
	}
	else
	{
		// Used save slot
		D1.u16 = u16[A0 + 0x36]
		fn00d96a()

		objA0.animation.frame = 0x17
		D1.u16 = u16[A0 + 0x36]
		if (D1.u8 == objA0.value3a && objA0.value3b != 0x00)
		{
			// This gets entered only for completed games
			if (objA0.value3b == 0x01)
				++objA0.animation.frame
			else if (objA0.value3b == 0x02)
				objA0.animation.frame += 0x02
			else
				objA0.animation.frame += 0x04

			if (objA0.value3b == 0x01 || objA0.value3b == 0x02)
			{
				// It feels strange that this is the same for Tails and Knuckles
				if (u16[A0 + 0x34] >= CHARS_TAILS_ALONE)
					objA0.animation.frame = 0x23
			}
		}

		if (u16[A0 + 0x38] == 0x00 && objA0.value3b == 0x00)
		{
			if (u16[0xffffb078] != 0x00)
				return 0x02

			u8[A0 + 0x1d] = 0x00
		}
		else
		{
			if (u16[A0 + 0x38] == 0x00)
				objA0.flags38 = 0xff

			if (u16[0xffffb078] != 0x00)
				return 0x02

			if (u16[0xffffeee4] != 0x00)
			{
				u8[A0 + 0x1d] = 0x00
				u16[A0 + 0x16] = 0x02
				
				return 0x02
			}
			
			// Originally this is only an equality check
			if (u16[A0 + 0x34] >= CHARS_KNUCKLES_ALONE)		
				D6 = 0x0b
			else if (u16[A0 + 0x34] == CHARS_TAILS_ALONE || objA0.value3b < 0x02)
				D6 = 0x0c
			else
				D6 = 0x0d

			D1.u16 = u16[A0 + 0x36]
			if (control.pad1.pressed & CONTROL_DOWN)
			{
				playSound(0x5b)
				--D1.u16
				
				if (D1.s16 < 0x00)
					D1.u16 = D6.u16
			}
			else if (control.pad1.pressed & CONTROL_UP)
			{
				playSound(0x5b)
				++D1.u16
				
				if (D1.u16 > D6.u16)
					D1 = 0x00
			}

			u16[A0 + 0x36] = D1.u16
			u8[A0 + 0x1d] = (level.framecounter.low & 0x10) ? 0x1a : 0x00
		}

		u16[A0 + 0x16] = 0x02
	
		if (u16[0xffffeee4] != 0x00)
			return 0x02
		
		if ((control.pad1.pressed & DataSelect.CONTROLS_ACCEPT) == 0x00)
			return 0x02

		level.giantrings_clear.u16 = u16[A1 + 0x04]
		
		if (objA0.value3b == 0x00)
			D0.u8 = u8[A1 + 0x03]
		else
		{
			D0.u16 = u16[A0 + 0x36]
			if (D0.u8 >= objA0.value3a)
				return 0x02
			
			level.giantrings_clear = 0x00
		}
		
		fn00da4e()
		
		// Here we fix the problem of the v1.0.0 release, when the bonus stage was saved as main one, and you could not get out of it.
		// - We will delete the saved data for the slot that saved the bonus stage as the main level, then the launch will be made from the stored VRAM level, and after, the second act will be saved in normal mode.
		{
			// Get saved data from PersistentData
			u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(A0)
			
			// Get data on whether the bonus stage was saved
			u8 getZoneID = loadSavedAct / 0x100
			bool savedBonusStage = (getZoneID == 0x0e || getZoneID == 0x0f || getZoneID == 0x10 || getZoneID == 0x11 || getZoneID == 0x12 || getZoneID == 0x13 || getZoneID == 0x14 || getZoneID == 0x15)
			
			// Check if this slot saved a bonus stage
			if (savedBonusStage)
			{
				SaveZoneAct.Data.resetSavedZoneAct(A0)
				//System.writeDisplayLine("Saved zone act deleted")
			}
		}
		
		// Here we do some checks to know if the saved act zone is worth loading or not
		// - We load the zone act if it is saved, and if the current slot is non-completed
		{
			// Get saved data from PersistentData
			u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(A0)
			
			// Slot data address load
			u32 slotDataAddress = 0xffffe6ac + (0x0a * (dataselect.slot_selected - 0x01))
			
			// Check if this slot is non-completed
			if (u8[slotDataAddress + 0x00] == 0x00)
			{
				// Check if you have saved data, if so, use it to loading
				if (loadSavedAct > 0x0000)
				{
					D0.u16 = loadSavedAct
					//System.writeDisplayLine("Saved zone act loaded")
				}
			}
			// If the slot is complete, then reset the saved data, as it is no longer necessary to use them
			else
			{
				// Check if you have saved data
				if (loadSavedAct > 0x0000)
				{
					SaveZoneAct.Data.resetSavedZoneAct(A0)
					//System.writeDisplayLine("Saved zone act deleted")
				}
			}
		}
		
		global.zone_act = D0.u16
		global.zone_act.apparent = D0.u16
		
		levelselect.characters  = (u8[A1 + 0x02] >> 0x04)
		global.next_bluespheres = (u8[A1 + 0x02] & 0x0f)

		D0 = u16[A1 + 0x06]
		A2 = 0xffffffb2
		
		fn00da1e()
		
		global.chaos_emeralds = D1.u8
		global.super_emeralds = D2.u8
		
	#if STANDALONE
		global.game_random_base = u8[A1 + 0x01]
		if (global.game_random_base == 0x00)
		{
			// Intentionally not using the (more deterministic) "getRandomNumber" here
			global.game_random_base = 0x01 + (System.rand() % 0xff) // Avoid the 0 value
		}
	#endif

		global.active_saveslot = A1
		DataSelect.SharedGameSlotContinue()

		D0.u8 = u8[A1 + 0x08]
		if ((D0.u8 == 0x00) || (D0.u8 < 0x03 && u8[A1 + 0x09] == 0x00))
		{
			u8[A1 + 0x08] = 0x03
			if (u8[A1 + 0x09] > 0x00)
			{
				--u8[A1 + 0x09]
			}
		}

		lives_counter = u8[A1 + 0x08]
		continues_counter = u8[A1 + 0x09]

	#if STANDALONE
		if (continues_counter >= 0x05)
		{
			Game.setAchievementComplete(ACHIEVEMENT_CONTINUES)
		}

		// Load additional data
		u32 slotIndex = (A1 - 0xffffe6ac) / 0x0a
		u32 address = 0x801100 + slotIndex * 0x20
		
		if (u8[A1] == 0x00)
		{
			// Load score, but only for non-completed games
			player.score = u32[address]
			player.next_life_score = (player.score / 5000 + 0x01) * 5000
		}
	#endif

		u8[0xffffef56] = 0xff
		SaveGameSlot()
		
		global.game_mode = 0x0c
		DrawObject()
		
		return 0x00
	}
}