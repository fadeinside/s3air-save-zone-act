define bool SHOW_DEBUG_LOGS	= false	// If true, the logs will be shown

//? The function is called when the first act passes, and when the zone is changed. Saves the current act in PersistentData after the title card.
function void SaveZoneAct.onChangingZones()
{
	// Ignore for Rolling Demo
	if (global.game_mode == 0x08)
		return
	
	// Slot address load
	u32 slotAddress = 0xffffb128 + (0x4a * (dataselect.slot_selected - 0x01))
	
	// Slot data address load
	u32 slotDataAddress = 0xffffe6ac + (0x0a * (dataselect.slot_selected - 0x01))
	
	// Load saved act
	u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
	
	// Save current act
	// - If it is not a "No Save" slot, if this slot is non-completed, and the current zone act not match with the saved one
	if (dataselect.slot_selected > 0x00 && (u8[slotDataAddress + 0x00] == 0x00) && (loadSavedAct != global.zone_act))
	{
		SaveZoneAct.Data.saveCurrentZoneAct(slotAddress, global.zone_act)
		if (SHOW_DEBUG_LOGS)
			debugLog(stringformat("Saved 0x%04x to 0x%06x", global.zone_act, slotAddress))
	}
}

//@ Function taken from sonic3air_dev/scripts/standalone/gamecallbacks.lemon
function void Standalone.onLevelStart()
{
	SaveZoneAct.onChangingZones()
	
	// Call the base function
	base.Standalone.onLevelStart()
}

//@ Function taken from sonic3air_dev/scripts/standalone/gamecallbacks.lemon
function void Standalone.onLevelFinished()
{
	SaveZoneAct.onChangingZones()
	
	// Call the base function
	base.Standalone.onLevelFinished()
}

//@ Function taken from sonic3air_dev/scripts/level/level_display.lemon
//# address-hook(0x00c434) end(0x00c4d0)
function void SaveGameOnLevelFinished()
{
	SaveZoneAct.onChangingZones()
	
	// Call the base function
	base.SaveGameOnLevelFinished()
}

//? Returns the actual ID of the zone, matching the portait art zone in Data Select.
function u8 SaveZoneAct.getActualZoneID(u32 address)
{
	// Setup variables
	u8 zoneID = u16[address + 0x36]
	u8 actualZoneID = zoneID
	
	// "Original zone order" by legobouwer9, check https://gamebanana.com/mods/54063
	if !(Mods.isModActive("Original zone order"))
	{
		if (zoneID >= 0x04 && zoneID <= 0x06)
			++actualZoneID
		else if (zoneID == 0x07)
			actualZoneID = 0x04
	}
	
	// Zone Identification fix
	// - Since HPZ does not use its 0x1601 ID in the portraits list, but uses the SSZ ID, this led to incorrect receipt of the zone ID, as a result of which the zone load was buggy. Here we assign a real ID to HPZ, and then demolish all the displaced zones to their places
	if (zoneID == 0x0a)
		actualZoneID = 0x16
	else if (zoneID == 0x0b)
		actualZoneID = 0x0a
	else if (zoneID == 0x0c)
		actualZoneID = 0x0b
	else if (zoneID == 0x0d)
		actualZoneID = 0x0c
	
	// Return value
	return actualZoneID
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d8c4) end(0x00d90c)
function void fn00d8c4()
{
	// Show the small announcement from the bottom left
	System.writeDisplayLine("> Press the [UP] key to delete only the saved act")
	
	// Deletion of saved data by Eggman (лблю)
	// - There are 2 ways to delete data. The first, standard, when you delete the save slot completely. The second deletes only the saved act data of the selected slot, the slots themselves will be saved, when pressing the [UP] key during the selection of [YES/NO] on the Eggman sign
	if ((control.pad1.pressed & CONTROL_LEFT) || (control.pad1.pressed & CONTROL_UP))
	{
		// Slot address load
		u32 slotAddress = 0xffffb128 + (0x4a * (dataselect.slot_selected - 0x01))
		
		// Get saved data from PersistentData
		u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
		
		// Check if you have saved data
		if (loadSavedAct > 0x0000)
		{
			if (SHOW_DEBUG_LOGS)
				debugLog(stringformat("(0x%04x) The saved zone act deleted", loadSavedAct))
			
			SaveZoneAct.Data.resetSavedZoneAct(slotAddress)
			u8[slotAddress + 0x75] = 0x01
		}
		
		// We will play a beep notifying you that the saved act has been successfully deleted
		if (control.pad1.pressed & CONTROL_UP)
		{
			playSound(0x68)
			
			objA0.base_state = 0x08
			u16[0xffffeee2] = 0x00
			fn00d854()
		}
		
		// Here we are set a temporary value to the addresses when slot was been deleted
		if (control.pad1.pressed & CONTROL_LEFT)
		{
			u8[slotAddress + 0x08] = 0x01
		}
	}
	
	// Call the base function
	base.fn00d8c4()
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
//# address-hook(0x00d790) end(0x00d790)
function void fn00d790()
{
	// Call base function
	base.fn00d790()
	
	// Loop simulates slots
	for (u8 slot = 0x00; slot < 0x08; ++slot)
	{
		// Slot address load
		u32 slotAddress = 0xffffb128 + (0x4a * slot)
		
		// Get saved data from PersistentData
		u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(slotAddress)
		
		// Slot data address load
		u32 slotDataAddress = 0xffffe6ac + (0x0a * slot)
		
		// Compliance check
		bool bossBattle = loadSavedAct == 0x1600 || loadSavedAct == 0x1700 || loadSavedAct == 0x0c00
		bool withoutAct = loadSavedAct == 0x1601 // || loadSavedAct == 0x0c00
		
		// Check if this slot is non-completed and not a zone without an act
		if (u8[slotDataAddress + 0x00] == 0x00 && !withoutAct)
		{
			if (bossBattle)
			{
				// We'll set a different value for saved boss battles to use in renderhook to define the "BOSS" sprite
				u8[slotAddress + 0x75] = 0x0a
			}
			else
			{
				// If it is not the boss battle, then assign a value to the address based on the stored value of the act
				u8 getActID = getchar(stringformat("%04x", loadSavedAct), 0x03) - 47
				u8[slotAddress + 0x75] = getActID
			}
		}
		else
		{
			// If this slot is complete, then we will reset the selected act when you change the slot
			u32 currentSelectedSlot = 0xffffb128 + (0x4a * (dataselect.slot_selected - 0x01))
			if (currentSelectedSlot != slotAddress)
			{
				u8[slotAddress + 0x75] = 0x00
			}
		}
		
		//debugLog(stringformat("Save slot : Act %d", u8[slotAddress + 0x75]))
	}
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
function bool fn00d458()
{
	// Result values:
	// - 0 = Abort outer function
	// - 1 = Allow character selection (up/down)
	// - 2 = Continue normally outside

	if (u8[A1] & 0x80)
	{
		// Empty save slot
		u8[A0 + 0x1d] = 0x0f
		objA0.animation.frame = 0x00
		
		if (u16[0xffffb078] != 0x00 || u16[0xffffeee4] != 0x00)
			return 0x02
		else
			return 0x01
	}
	else
	{
		// Used save slot
		D1.u16 = u16[A0 + 0x36]
		fn00d96a()

		objA0.animation.frame = 0x17
		D1.u16 = u16[A0 + 0x36]
		if (D1.u8 == objA0.value3a && objA0.value3b != 0x00)
		{
			// This gets entered only for completed games
			if (objA0.value3b == 0x01)
				++objA0.animation.frame
			else if (objA0.value3b == 0x02)
				objA0.animation.frame += 0x02
			else
				objA0.animation.frame += 0x04

			if (objA0.value3b == 0x01 || objA0.value3b == 0x02)
			{
				// It feels strange that this is the same for Tails and Knuckles
				if (u16[A0 + 0x34] >= CHARS_TAILS_ALONE)
					objA0.animation.frame = 0x23
			}
		}

		if (u16[A0 + 0x38] == 0x00 && objA0.value3b == 0x00)
		{
			if (u16[0xffffb078] != 0x00)
				return 0x02

			u8[A0 + 0x1d] = 0x00
		}
		else
		{
			if (u16[A0 + 0x38] == 0x00)
				objA0.flags38 = 0xff

			if (u16[0xffffb078] != 0x00)
				return 0x02

			if (u16[0xffffeee4] != 0x00)
			{
				u8[A0 + 0x1d] = 0x00
				u16[A0 + 0x16] = 0x02
				
				return 0x02
			}
			
			// Originally this is only an equality check
			if (u16[A0 + 0x34] >= CHARS_KNUCKLES_ALONE)		
				D6 = 0x0b
			else if (u16[A0 + 0x34] == CHARS_TAILS_ALONE || objA0.value3b < 0x02)
				D6 = 0x0c
			else
				D6 = 0x0d
			
			// Zone select
			D1.u16 = u16[A0 + 0x36]
			if (control.pad1.pressed & CONTROL_DOWN)
			{
				playSound(0x5b)
				--D1.u16
				
				if (D1.s16 < 0x00)
					D1.u16 = D6.u16
			}
			else if (control.pad1.pressed & CONTROL_UP)
			{
				playSound(0x5b)
				++D1.u16
				
				if (D1.u16 > D6.u16)
					D1 = 0x00
			}
			
			// If there is a second act for the selected zone, the act is not selected and "CLEAR" portrait is currently inactive then set the value to 1
			bool withoutSecondAct = D1.u16 == 0x0a || D1.u16 == 0x0b || D1.u16 == 0x0d
			if (!withoutSecondAct && u8[A0 + 0x75] == 0x00 && (D1.u16 - 0x01 != D6.u16 && D1.u16 != 0x0e))
			{
				u8[A0 + 0x75] = 0x01
			}
			
			// Act select
			// - By pressing the [X] key, you will be able to switch from act 1 to act 2, and vice versa. Provided that there is a second act for this zone, and "CLEAR" portrait is not active now
			if (Input.buttonPressed(BUTTON_B) && !withoutSecondAct && !(D1.u16 == 0x0d))
			{
				playSound(0x5b)
				++u8[A0 + 0x75]
				
				if (u8[A0 + 0x75] > 0x02)
					u8[A0 + 0x75] = 0x01
			}
			
			// If there is no second act for this zone, or if "CLEAR" portrait is currently active, reset the choosen act
			if (withoutSecondAct || (D1.u16 - 0x01 == D6.u16 || D1.u16 == 0x0e))
			{
				u8[A0 + 0x75] = 0x00
			}
			
			u16[A0 + 0x36] = D1.u16
			u8[A0 + 0x1d] = (level.framecounter.low & 0x10) ? 0x1a : 0x00
		}

		u16[A0 + 0x16] = 0x02
	
		if (u16[0xffffeee4] != 0x00)
			return 0x02
		
		if ((control.pad1.pressed & DataSelect.CONTROLS_ACCEPT) == 0x00)
			return 0x02

		level.giantrings_clear.u16 = u16[A1 + 0x04]
		
		if (objA0.value3b == 0x00)
		{
			D0.u8 = u8[A1 + 0x03]
		}
		else
		{
			D0.u16 = u16[A0 + 0x36]
			if (D0.u8 >= objA0.value3a)
				return 0x02
			
			level.giantrings_clear = 0x00
		}
		
		fn00da4e()
		
		// Here is the section for correcting stored data. There are times when the wrong value is stored and you are missing an invalid zone or act.
		// - We will delete the saved data of the current save slot if it saved the bonus stage as the main one, when the competion stage was saved as the main one (This is impossible by the way), when the act is greater than 2, or when hidden Place Emerald Cave is saved as the main level. After removal, the level from the VRAM will be loaded.
		{
			// Get saved data from PersistentData
			u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(A0)
			
			// Get the level data
			u8 getZoneID = loadSavedAct / 0x100
			bool savedBonusStage = (getZoneID == 0x13 || getZoneID == 0x14 || getZoneID == 0x15)
			bool savedCompetitionStage = (getZoneID == 0x0e || getZoneID == 0x0f || getZoneID == 0x10 || getZoneID == 0x11 || getZoneID == 0x12)
			
			// Get the act data
			u8 getActID = getchar(stringformat("%04x", loadSavedAct), 0x03) - 47
			bool savedUnknownAct = (getActID > 0x02)
			
			// Check if there are any matches
			if (savedBonusStage || savedCompetitionStage || savedUnknownAct || loadSavedAct == 0x1701)
			{
				if (SHOW_DEBUG_LOGS)
					debugLog(stringformat("(0x%04x) The saved zone act deleted", loadSavedAct))
				SaveZoneAct.Data.resetSavedZoneAct(A0)
			}
		}
		
		// Here we do some checks to know if the saved act zone is worth loading or not
		// - We load the zone act if it is saved, and if the current slot is non-completed
		{
			// Get saved data from PersistentData
			u16 loadSavedAct = SaveZoneAct.Data.loadSavedZoneAct(A0)
			
			// Slot data address load
			u32 slotDataAddress = 0xffffe6ac + (0x0a * (dataselect.slot_selected - 0x01))
			
			// Check if this slot is non-completed
			if (u8[slotDataAddress + 0x00] == 0x00)
			{
				// Check if you have saved data, if so, use it to loading
				if (loadSavedAct > 0x0000)
				{
					// We'll keep the level with Lava Reef and Death Egg Boss, because it's fun
					bool bossBattle = loadSavedAct == 0x1600 || loadSavedAct == 0x1700
					
					// Check if the saved zone is the same as the slot portait shows
					if (SaveZoneAct.getActualZoneID(A0) == (loadSavedAct / 0x100) || bossBattle)
					{
						D0.u16 = loadSavedAct
						if (SHOW_DEBUG_LOGS)
							debugLog(stringformat("(0x%04x) (0x%02x == 0x%02x) The saved zone act loaded", D0.u16, SaveZoneAct.getActualZoneID(A0), (loadSavedAct / 0x100)))
					}
					// If not, then try to "assemble" the zone ID based on the stored zone in the VRAM, and include the saved act from the PersistentData slot
					else
					{
						u8 getActID = getchar(stringformat("%04x", loadSavedAct), 0x03) - 48
						D0.u16 = (SaveZoneAct.getActualZoneID(A0) * 0x100) + getActID
						
						if (SHOW_DEBUG_LOGS)
							debugLog(stringformat("(0x%04x) (0x%02x != 0x%02x) The assembled zone act loaded", D0.u16, SaveZoneAct.getActualZoneID(A0), (loadSavedAct / 0x100)))
					}
				}
			}
			// If the slot is complete, then reset the saved data, as it is no longer necessary to use them
			else
			{
				// Check if you have saved data
				if (loadSavedAct > 0x0000)
				{
					if (SHOW_DEBUG_LOGS)
						debugLog(stringformat("(0x%04x) The saved zone act deleted", loadSavedAct))
					SaveZoneAct.Data.resetSavedZoneAct(A0)
				}
				
				// Check if the act selection was used here. If so, "assemble" and load the zone based on this data
				if (u8[A0 + 0x75] > 0x00)
				{
					D0.u16 = (SaveZoneAct.getActualZoneID(A0) * 0x100) + (u8[A0 + 0x75] - 0x01)
					if (SHOW_DEBUG_LOGS)
						debugLog(stringformat("(0x%04x) The assembled zone act loaded", D0.u16))
				}
			}
		}
		
		global.zone_act = D0.u16
		global.zone_act.apparent = D0.u16
		
		levelselect.characters  = (u8[A1 + 0x02] >> 0x04)
		global.next_bluespheres = (u8[A1 + 0x02] & 0x0f)

		D0 = u16[A1 + 0x06]
		A2 = 0xffffffb2
		
		fn00da1e()
		
		global.chaos_emeralds = D1.u8
		global.super_emeralds = D2.u8
		
	#if STANDALONE
		global.game_random_base = u8[A1 + 0x01]
		if (global.game_random_base == 0x00)
		{
			// Intentionally not using the (more deterministic) "getRandomNumber" here
			global.game_random_base = 0x01 + (System.rand() % 0xff) // Avoid the 0 value
		}
	#endif

		global.active_saveslot = A1
		DataSelect.SharedGameSlotContinue()

		D0.u8 = u8[A1 + 0x08]
		if ((D0.u8 == 0x00) || (D0.u8 < 0x03 && u8[A1 + 0x09] == 0x00))
		{
			u8[A1 + 0x08] = 0x03
			if (u8[A1 + 0x09] > 0x00)
			{
				--u8[A1 + 0x09]
			}
		}

		lives_counter = u8[A1 + 0x08]
		continues_counter = u8[A1 + 0x09]

	#if STANDALONE
		if (continues_counter >= 0x05)
		{
			Game.setAchievementComplete(ACHIEVEMENT_CONTINUES)
		}

		// Load additional data
		u32 slotIndex = (A1 - 0xffffe6ac) / 0x0a
		u32 address = 0x801100 + slotIndex * 0x20
		
		if (u8[A1] == 0x00)
		{
			// Load score, but only for non-completed games
			player.score = u32[address]
			player.next_life_score = (player.score / 5000 + 0x01) * 5000
		}
	#endif

		u8[0xffffef56] = 0xff
		SaveGameSlot()
		
		global.game_mode = 0x0c
		DrawObject()
		
		return 0x00
	}
}